# Инструкция по работе с Git
# Тема №1. Синтаксис языка Markdown
## <ins>1.1. Основные команды Git</ins>
Топ-10 команд для работы с Git%:
✦ **_git init_** – инициализация локального репозитория
✦ **git status** – получить информацию от git о его текущем состоянии
✦ **_git add_** – добавить файл или файлы к следующему коммиту
✦ **git commit -m “message”** – создание коммита
✦ **_git log_** – вывод на экран истории всех коммитов с их хеш-кодами
✦ **git checkout** – переход от одного коммита к другому
✦ **_git checkout master_** – вернуться к актуальному состоянию и продолжить работу
✦ **git diff** – увидеть разницу между текущим файлом и закоммиченным файлом
✦ **_git commit -am "message"_** – добавление и создание коммита
✦ **git revert** – отменяет изменения, записанные только одним коммитом

---
## <ins>1.2. Выделение текста

Ссылка на справочник по Markdown от Microsoft:
_https://docs.microsoft.com/ru-ru/contribute/markdown-reference_

✦ **# Заголовок** – выделение заголовков. Количество символов **“#”** задаёт уровень заголовка (поддерживается 6 уровней).

✦ **=** или **- –** подчёркиванием этими символами (не менее 3 подряд) выделяют заголовки первого (“=”) и второго (“-”) уровней.

✦ ** **Полужирное начертание**** или __ **Полужирное начертание**__

✦ _* Курсивное начертание*_ или _ *Курсивное начертание*_

✦ ***Полужирное курсивное начертание***

✦ ~~ ~~Зачёркнутый текст~~ ~~

---

## <ins>1.3. Списки

✦ * **Строка** – ненумерованные списки, символ “*” в начале строки

Пример:
* Элемент 1
* Элеемнт 2
* Элемент 3

✦ **1, 2, 3 …** – нумерованные списки

Пример:
1. Элемент
2. Элемент
3. Элемент

---

# Тема №2. Ветки.

## <ins>2.1. Основные команды Git</ins>

✦ **git branch** – посмотреть список веток в репозитории

✦ **git branch <название ветки>** – создать новую ветку

✦ **git checkout <название ветки>** – переход к другой ветке

✦ **git branch -d <название ветки>** – удалить ветку

---

# Тема №3. Работа с удалёнными репозиториями в Git - GitHub.

## <ins>3.1. Основные команды Git</ins>

✦ **git clone <url-адрес репозитория>** – клонирование внешнего репозитория на локальный ПК

✦ **git pull** – получение изменений и слияние с локальной версией

✦ **git push** – отправляет локальную версию репозитория на внешний